#Code qui marche + Etapes mais initialise avec pleins de 0
import random

def generate_board():
    # Generate a completed Sudoku board
    board = [[0]*9 for _ in range(9)]
    fill_values(board)
    return board

def fill_values(bo):
    for num in range(1, 10):
        row, col = random.randint(0, 8), random.randint(0, 8)
        while not valid(bo, num, (row, col)):
            row, col = random.randint(0, 8), random.randint(0, 8)
        bo[row][col] = num

def solve(bo):
    find = find_empty(bo)
    if not find:
        return True
    else:
        row, col = find

    for num in range(1, 10):
        if valid(bo, num, (row, col)):
            bo[row][col] = num
            print_board(bo)

            if solve(bo):
                return True

            bo[row][col] = 0

    return False

def valid(bo, num, pos):
    for i in range(9):
        if bo[pos[0]][i] == num and pos[1] != i:
            return False

    for i in range(9):
        if bo[i][pos[1]] == num and pos[0] != i:
            return False

    box_x = pos[1] // 3
    box_y = pos[0] // 3

    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if bo[i][j] == num and (i, j) != pos:
                return False

    return True

def print_board(bo):
    for i in range(9):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - - ")

        for j in range(9):
            if j % 3 == 0 and j != 0:
                print(" | ", end="")

            if j == 8:
                print(bo[i][j])
            else:
                print(str(bo[i][j]) + " ", end="")

def find_empty(bo):
    for i in range(9):
        for j in range(9):
            if bo[i][j] == 0:
                return (i, j)
    return None

# Generate a new random Sudoku board
board = generate_board()

# Print the Sudoku puzzle before resolution
print("Sudoku Puzzle (Before Resolution):")
print_board(board)

# Print a separator
print("\n" + "-"*30 + "\n")

# Solve the Sudoku puzzle
if solve(board):
    # Print the solved Sudoku puzzle
    print("\nSudoku Puzzle (After Resolution):")
    print_board(board)
else:
    print("\nUnable to solve the Sudoku puzzle with the given initial configuration.")
